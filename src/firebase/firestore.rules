
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function getUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    function isDirector() {
      return isUserAuthenticated() && getUserRole() == 'directeur';
    }

    function isSupervisorGeneral() {
      return isUserAuthenticated() && getUserRole() == 'supervisor_general';
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }

    // All authenticated users can read any data
    match /{path=**} {
        allow read: if isUserAuthenticated();
    }
    
    // Write rules
    match /users/{userId} {
      allow write: if isOwner(userId) || isDirector();
    }

    match /stages/{stageId} {
      allow write: if isDirector();
    }

    match /levels/{levelId} {
      allow write: if isDirector();
    }

    match /subjects/{subjectId} {
      allow write: if isDirector();
    }

    match /lessons/{lessonId} {
      allow write: if isDirector() || (isUserAuthenticated() && request.resource.data.authorId == request.auth.uid);
    }
    
    match /proposals/{proposalId} {
      allow create: if isUserAuthenticated();
      allow update: if isDirector(); // Director can approve/reject
    }

    match /messages/{messageId} {
        allow create: if isUserAuthenticated();
        allow update: if isDirector(); // Director can forward
    }
  }
}
