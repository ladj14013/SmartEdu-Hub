rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles. Only the authenticated user can
     *              read or write their own profile data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their own profile with id matching their UID.
     *    request.auth.uid == 'user_abc' && request.resource.data.id == 'user_abc'
     * @allow (get, update, delete) - User with UID 'user_abc' can read/update/delete their own profile.
     *    request.auth.uid == 'user_abc'
     * @deny (create) - User with UID 'user_xyz' cannot create a profile for 'user_abc'.
     *    request.auth.uid == 'user_xyz' && request.resource.data.id == 'user_abc'
     * @deny (get, update, delete) - User with UID 'user_xyz' cannot read/update/delete profile of 'user_abc'.
     *    request.auth.uid == 'user_xyz'
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(/databases/$(database)/documents/users/$(userId));
      }

      allow get: if isOwner(userId);
      allow list: if false; // No listing of users.

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to stages.
     * @path /stages/{stageId}
     * @allow (get, list) - Any user, signed in or not, can read stage data.
     * @deny (create, update, delete) - No user can create, update, or delete stage data.
     * @principle Allows public read access for static data.
     */
    match /stages/{stageId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to levels.
     * @path /levels/{levelId}
     * @allow (get, list) - Any user, signed in or not, can read level data.
     * @deny (create, update, delete) - No user can create, update, or delete level data.
     * @principle Allows public read access for static data.
     */
    match /levels/{levelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to subjects.
     * @path /subjects/{subjectId}
     * @allow (get, list) - Any user, signed in or not, can read subject data.
     * @deny (create, update, delete) - No user can create, update, or delete subject data.
     * @principle Allows public read access for static data.
     */
    match /subjects/{subjectId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to lessons, but restricts write access
     *              to the teacher who created the lesson.
     * @path /lessons/{lessonId}
     * @allow (get, list) - Any user, signed in or not, can read lesson data.
     * @allow (create) - A teacher can create a lesson with their teacherId.
     *    request.auth.uid == 'teacher_abc' && request.resource.data.teacherId == 'teacher_abc'
     * @allow (update, delete) - Only the teacher who created the lesson can update or delete it.
     *    request.auth.uid == resource.data.teacherId
     * @deny (create) - A student cannot create a lesson.
     *    request.auth.uid != 'teacher_abc'
     * @deny (update, delete) - A different teacher cannot update or delete the lesson.
     *    request.auth.uid != resource.data.teacherId
     * @principle Public read, owner-only writes.
     */
    match /lessons/{lessonId} {
      allow get, list: if true;

      function isTeacherOwner(teacherId) {
        return request.auth != null && request.auth.uid == teacherId;
      }

      function isExistingTeacherOwner(lessonId, teacherId) {
        return request.auth != null && request.auth.uid == teacherId && exists(/databases/$(database)/documents/lessons/$(lessonId));
      }

      allow create: if request.auth != null && isTeacherOwner(request.resource.data.teacherId);
      allow update: if request.auth != null && isExistingTeacherOwner(lessonId, resource.data.teacherId);
      allow delete: if request.auth != null && isExistingTeacherOwner(lessonId, resource.data.teacherId);
    }

    /**
     * @description Restricts exercise creation, update, and deletion to the teacher who
     *              created the parent lesson.
     * @path /lessons/{lessonId}/exercises/{exerciseId}
     * @allow (get, list) - Any user, signed in or not, can read exercise data.
     * @allow (create, update, delete) - Only the teacher who created the parent lesson can create, update or delete exercises.
     *    get(/databases/$(database)/documents/lessons/$(lessonId)).data.teacherId == request.auth.uid
     * @deny (create, update, delete) - Other users cannot create, update, or delete exercises.
     *    get(/databases/$(database)/documents/lessons/$(lessonId)).data.teacherId != request.auth.uid
     * @principle Owner-only writes, inherited from parent document.
     */
    match /lessons/{lessonId}/exercises/{exerciseId} {
      function isTeacherOwnerOfLesson(lessonId) {
          return get(/databases/$(database)/documents/lessons/$(lessonId)).data.teacherId == request.auth.uid;
      }
      allow get, list: if true;
      allow create: if request.auth != null && isTeacherOwnerOfLesson(lessonId);
      allow update: if request.auth != null && isTeacherOwnerOfLesson(lessonId);
      allow delete: if request.auth != null && isTeacherOwnerOfLesson(lessonId);
    }

    /**
     * @description Enforces user-ownership for student lesson progress. Only the authenticated
     *              student can read or write their own progress data.
     * @path /users/{studentId}/lessonProgress/{lessonId}
     * @allow (create) - User with UID 'student_abc' can create their own progress entry with studentId matching their UID.
     *    request.auth.uid == 'student_abc' && request.resource.data.studentId == 'student_abc'
     * @allow (get, update, delete) - User with UID 'student_abc' can read/update/delete their own progress.
     *    request.auth.uid == 'student_abc'
     * @deny (create) - User with UID 'user_xyz' cannot create a progress entry for 'student_abc'.
     *    request.auth.uid == 'user_xyz' && request.resource.data.studentId == 'student_abc'
     * @deny (get, update, delete) - User with UID 'user_xyz' cannot read/update/delete progress of 'student_abc'.
     *    request.auth.uid == 'user_xyz'
     * @principle Enforces document ownership for writes.
     */
    match /users/{studentId}/lessonProgress/{lessonId} {
      function isOwner(studentId) {
        return request.auth != null && request.auth.uid == studentId;
      }

      function isExistingOwner(studentId, lessonId) {
        return isOwner(studentId) && exists(/databases/$(database)/documents/users/$(studentId)/lessonProgress/$(lessonId));
      }

      allow get: if isOwner(studentId);
      allow list: if false;

      allow create: if isOwner(studentId) && request.resource.data.studentId == studentId;
      allow update: if isOwner(studentId);
      allow delete: if isExistingOwner(studentId, lessonId);
    }

    /**
     * @description Allows only the sender or receiver to read a message.  Any authenticated user
     * can create a message.
     * @path /messages/{messageId}
     * @allow (create) - Any authenticated user can create a message.
     *    request.auth.uid != null
     * @allow (get) - Only the sender or receiver can read the message.
     *    request.auth.uid == resource.data.senderId || request.auth.uid == resource.data.receiverId
     * @deny (get) - Other users cannot read the message.
     *    request.auth.uid != resource.data.senderId && request.auth.uid != resource.data.receiverId
     * @principle Shared Access (sender and receiver).
     */
    match /messages/{messageId} {
      function isSenderOrReceiver() {
        return request.auth != null && (request.auth.uid == resource.data.senderId || request.auth.uid == resource.data.receiverId);
      }

      function isExistingSenderOrReceiver(messageId) {
        return request.auth != null && (request.auth.uid == resource.data.senderId || request.auth.uid == resource.data.receiverId) && exists(/databases/$(database)/documents/messages/$(messageId));
      }

      allow get: if isSenderOrReceiver();
      allow list: if false;

      allow create: if request.auth != null;
      allow update: if request.auth != null && isExistingSenderOrReceiver(messageId); // No updates allowed on messages.
      allow delete: if false; // No deletes allowed on messages.
    }
  }
}