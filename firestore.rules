rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isUserAuthenticated() && request.auth.uid == userId;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isRole(role) {
      return isUserAuthenticated() && getUserData(request.auth.uid).role == role;
    }

    function isDirector() {
      return isRole('directeur');
    }

    // --- Rules ---

    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }
    
    // PUBLIC: Allow anyone to read public content needed for signup and homepage
    match /(stages|levels|subjects|settings)/{docId} {
      allow read: if true;
    }

    // USERS: Complex rules for users collection
    match /users/{userId} {
      // Any authenticated user can read their own data.
      // The Director can read any user's data.
      // Teachers can read data of students linked to them.
      allow read: if isOwner(userId) || isDirector() || 
                  (isRole('teacher') && getUserData(userId).role == 'student' && resource.data.linkedTeachers[getUserData(request.auth.uid).subjectId] == request.auth.uid);
      
      // A user can update their own data. The director can update any user's data.
      allow write: if isOwner(userId) || isDirector();
    }
    
    // LESSONS:
    match /lessons/{lessonId} {
      // Anyone authenticated can read public lessons.
      // Private lessons can be read by their author, the director, or linked students.
      allow read: if isUserAuthenticated() && (
                    resource.data.type == 'public' || 
                    resource.data.authorId == request.auth.uid ||
                    isDirector() ||
                    (getUserData(request.auth.uid).role == 'student' && getUserData(request.auth.uid).linkedTeachers[resource.data.subjectId] == resource.data.authorId)
                  );
      
      // Lessons can be written by their author or the director.
      allow write: if isDirector() || (isUserAuthenticated() && request.resource.data.authorId == request.auth.uid);
    }

    // MESSAGES:
    match /messages/{messageId} {
        // Any authenticated user can create a message.
        allow create: if isUserAuthenticated();
        // Only the director can update (forward) a message.
        allow update: if isDirector();
    }
    
    // STUDENT PROGRESS:
    match /users/{studentId}/lessonProgress/{lessonId} {
        // A student can write their own progress.
        allow write: if isOwner(studentId);
        // A student can read their own progress. The director and linked teachers can also read it.
        allow read: if isOwner(studentId) || isDirector() || 
                    (isRole('teacher') && getUserData(studentId).linkedTeachers[getUserData(request.auth.uid).subjectId] == request.auth.uid);
    }
    
    // OTHER COLLECTIONS for DIRECTOR
    match /(stages|levels|subjects)/{docId} {
        allow write: if isDirector();
    }
    match /supervisor_notes/{noteId} {
        allow read, write: if isRole('supervisor_subject') || isRole('teacher');
    }
  }
}
