/**
 * @fileoverview Firestore Security Rules for SmartEdu Hub.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles
 * and student lesson progress. Lessons are publicly readable but writable
 * only by the teacher who created them. Stages, Levels, Subjects, and
 * Messages are publicly accessible.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Only the authenticated user can
 *   read or write their own profile.
 * - /stages/{stageId}: Stores educational stages. Publicly readable.
 * - /levels/{levelId}: Stores educational levels within stages. Publicly readable.
 * - /subjects/{subjectId}: Stores subjects within levels. Publicly readable.
 * - /lessons/{lessonId}: Stores lesson data. Publicly readable, but only the
 *   teacher who created it can modify it.
 * - /lessons/{lessonId}/exercises/{exerciseId}: Stores exercises within lessons.
 *   Only the teacher who created the parent lesson can modify them.
 * - /users/{studentId}/lessonProgress/{lessonId}: Stores student progress for
 *   each lesson. Only the student can modify their own progress.
 * - /messages/{messageId}: Stores messages between users. Publicly readable.
 *
 * Key Security Decisions:
 * - User listing is disallowed for privacy.
 * - Stages, Levels, Subjects, and Messages are publicly readable to simplify
 *   data access for all users.
 * - Lessons can be marked as public to make them available to all users.
 * - Default security posture for ambiguous relationships is strict owner-only
 *   access.
 *
 * Denormalization for Authorization:
 * - Lesson documents have a `teacherId` field to easily check ownership for
 *   write operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID "user123" can create their profile if authenticated as "user123".
     * @allow (get, update, delete) User with ID "user123" can read/update/delete their profile if authenticated as "user123".
     * @deny (create) User with ID "user123" cannot create a profile if authenticated as "user456".
     * @deny (get, update, delete) User with ID "user123" cannot read/update/delete their profile if authenticated as "user456".
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to educational stages.
     * @path /stages/{stageId}
     * @allow (get, list) Any user can read the stages.
     * @deny (create, update, delete) No user can create, update, or delete stages through the client.
     * @principle Allows public read access to non-sensitive data.
     */
    match /stages/{stageId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to educational levels.
     * @path /levels/{levelId}
     * @allow (get, list) Any user can read the levels.
     * @deny (create, update, delete) No user can create, update, or delete levels through the client.
     * @principle Allows public read access to non-sensitive data.
     */
    match /levels/{levelId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to subjects.
     * @path /subjects/{subjectId}
     * @allow (get, list) Any user can read the subjects.
     * @deny (create, update, delete) No user can create, update, or delete subjects through the client.
     * @principle Allows public read access to non-sensitive data.
     */
    match /subjects/{subjectId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to lessons, but restricts write access to the teacher who created the lesson.
     * @path /lessons/{lessonId}
     * @allow (get, list) Any user can read the lessons.
     * @allow (create) A teacher can create a lesson with their teacherId.
     * @allow (update, delete) Only the teacher who created the lesson can update or delete it.
     * @deny (create) A teacher cannot create a lesson without their teacherId.
     * @deny (update, delete) A user who is not the teacher cannot update or delete the lesson.
     * @principle Allows public read access while enforcing ownership for writes.
     */
    match /lessons/{lessonId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.teacherId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.teacherId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.teacherId == request.auth.uid;
    }

    /**
     * @description Restricts exercise creation, update, and deletion to the teacher who owns the parent lesson.
     * @path /lessons/{lessonId}/exercises/{exerciseId}
     * @allow (create) A teacher can create an exercise within their lesson.
     * @allow (update, delete) Only the teacher who created the parent lesson can update or delete exercises.
     * @deny (create) A user who is not the teacher cannot create exercises in the lesson.
     * @deny (update, delete) A user who is not the teacher cannot update or delete exercises in the lesson.
     * @principle Restricts write access to resources based on the parent document's ownership.
     */
    match /lessons/{lessonId}/exercises/{exerciseId} {
        allow get, list: if true; // Allowing public reads for exercises for now
        allow create: if isSignedIn() && get(/databases/$(database)/documents/lessons/$(lessonId)).data.teacherId == request.auth.uid;
        allow update: if isSignedIn() && get(/databases/$(database)/documents/lessons/$(lessonId)).data.teacherId == request.auth.uid;
        allow delete: if isSignedIn() && get(/databases/$(database)/documents/lessons/$(lessonId)).data.teacherId == request.auth.uid;
    }


    /**
     * @description Enforces user-ownership for student lesson progress.
     * @path /users/{studentId}/lessonProgress/{lessonId}
     * @allow (create, get, update, delete) Student with ID "student123" can create, read, update or delete their progress if authenticated as "student123".
     * @deny (create, get, update, delete) Student with ID "student123" cannot create, read, update or delete progress if authenticated as "student456".
     * @principle Enforces document ownership for writes.
     */
    match /users/{studentId}/lessonProgress/{lessonId} {
      allow get: if isOwner(studentId);
      allow list: if false;
      allow create: if isOwner(studentId);
      allow update: if isOwner(studentId);
      allow delete: if isExistingOwner(studentId);
    }

    /**
     * @description Allows public read access to messages.
     * @path /messages/{messageId}
     * @allow (get, list) Any user can read the messages.
     * @deny (create, update, delete) No user can create, update, or delete messages through the client.
     * @principle Allows public read access to non-sensitive data.
     */
    match /messages/{messageId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
  }
}