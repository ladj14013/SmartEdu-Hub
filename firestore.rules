rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper function to check if user is signed in
    function isSignedIn() {
      return request.auth != null;
    }
    
    // Helper function to get user's role
    function getRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    // Helper function to check if user is a specific role
    function isRole(role) {
      return isSignedIn() && getRole() == role;
    }

    // Users can only read their own profile, but directeur can read any.
    // Teachers/Students can read each other's profiles if they are linked.
    match /users/{userId} {
       allow read: if isSignedIn() && 
                    (request.auth.uid == userId || 
                     isRole('directeur') || 
                     (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.linkedTeachers[get(/databases/$(database)/documents/users/$(userId)).data.subjectId] == userId) ||
                     (get(/databases/$(database)/documents/users/$(userId)).data.linkedStudentIds[request.auth.uid] != null)
                    );
      allow update, write: if isSignedIn() && (request.auth.uid == userId || isRole('directeur'));
      allow list: if isRole('directeur');
    }
    
    // Stages, Levels can be read by any signed-in user. Only directeur can modify.
    match /{path=**}/stages/{stageId} {
        allow read: if isSignedIn();
        allow write: if isRole('directeur');
    }

    match /{path=**}/levels/{levelId} {
        allow read: if isSignedIn();
        allow write: if isRole('directeur');
    }
    
    // Subjects can be read by students/teachers of that stage. Only directeur can modify.
    match /subjects/{subjectId} {
       allow get: if isSignedIn();
       allow list: if isSignedIn() && request.query.where[0] == 'stageId';
       allow write: if isRole('directeur');
    }
    
    // Lessons can be read by students/teachers of that level and subject.
    // Author, supervisor, or directeur can write.
    match /lessons/{lessonId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn(); // Queries are filtered in the code
      allow write: if isSignedIn() && (isRole('directeur') || isRole('supervisor_subject') || request.auth.uid == resource.data.authorId);
    }
    
    // Exercises are part of lessons, inherit lesson rules.
    match /lessons/{lessonId}/exercises/{exerciseId} {
        allow read, write: if isSignedIn();
    }
    
    // Student progress can only be read/written by the student themselves or a linked teacher/supervisor.
    match /users/{studentId}/lessonProgress/{progressId} {
       allow read, write: if isSignedIn() && (request.auth.uid == studentId || isRole('directeur') || isRole('supervisor_subject'));
    }
    
    // Messages can be created by any signed-in user. Only directeur/supervisors can manage them.
    match /messages/{messageId} {
      allow create: if isSignedIn();
      allow read, update, list: if isSignedIn() && (isRole('directeur') || isRole('supervisor_general'));
    }
    
    // Settings can only be managed by the director.
    match /settings/{settingId} {
        allow read: if isSignedIn();
        allow write: if isRole('directeur');
    }
    
    // Notes can be created by supervisors. Read by involved teacher/supervisor.
    match /supervisor_notes/{noteId} {
      allow create: if isRole('supervisor_subject');
      allow list, get: if isSignedIn() && (isRole('supervisor_subject') || request.auth.uid == get(/databases/$(database)/documents/lessons/$(resource.data.lessonId)).data.authorId);
    }
  }
}
