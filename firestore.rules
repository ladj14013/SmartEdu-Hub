rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is a director
    function isDirector() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'directeur';
    }

    // Helper function to check for linked student/teacher relationship
    function isLinked(targetUserId) {
      let currentUser = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      let targetUser = get(/databases/$(database)/documents/users/$(targetUserId)).data;

      // Student can read their linked teacher's data
      let studentReadsTeacher = currentUser.role == 'student' && 
                                targetUser.role == 'teacher' && 
                                currentUser.linkedTeachers[targetUser.subjectId] == targetUserId;
      
      // Teacher can read their linked student's data
      let teacherReadsStudent = currentUser.role == 'teacher' &&
                                targetUser.role == 'student' &&
                                targetUserId in currentUser.linkedStudentIds;

      return studentReadsTeacher || teacherReadsStudent;
    }

    // Default deny all reads and writes
    match /{document=**} {
      allow read, write: if false;
    }

    // USERS collection
    match /users/{userId} {
      // Allow read if user is reading their own data, is a director, or is linked (student/teacher)
      allow get: if request.auth.uid == userId || isDirector() || isLinked(userId);
      // Allow list only for directors
      allow list: if isDirector();
      // Allow create for anyone (signup)
      allow create: if true; 
      // Allow update only for user on their own doc or a director
      allow update: if request.auth.uid == userId || isDirector();
    }
    
    // STAGES, LEVELS, SUBJECTS collections
    // Allow read for any authenticated user.
    // Allow write only for directors.
    match /(stages|levels|subjects)/{docId} {
      allow read: if request.auth != null;
      allow write: if isDirector();
    }

    // LESSONS collection
    match /lessons/{lessonId} {
      // Public lessons are readable by any authenticated user.
      // Private lessons are readable by the author (teacher) or a linked student.
      allow get: if request.auth != null && 
                    (resource.data.type == 'public' || 
                     resource.data.authorId == request.auth.uid ||
                     isLinked(resource.data.authorId));
                     
      // List lessons based on subjectId. We will filter on the client.
      allow list: if request.auth != null;

      // Create/Update/Delete rules:
      // Director can do anything.
      // Teacher can manage their own private lessons.
      // Supervisor can manage public lessons in their subject.
      function isAuthor() {
        return request.auth.uid == resource.data.authorId;
      }
      function isSupervisorForLesson() {
        let supervisor = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
        return supervisor.role == 'supervisor_subject' && supervisor.subjectId == resource.data.subjectId;
      }

      allow write: if isDirector() || 
                      (request.resource.data.type == 'private' && isAuthor()) ||
                      (request.resource.data.type == 'public' && isSupervisorForLesson());
    }

    // MESSAGES (Contact Us)
    match /messages/{messageId} {
      // Anyone can create a message
      allow create: if true;
      // Only directors and general supervisors can read/list/update messages
      allow read, list, update: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['directeur', 'supervisor_general'];
    }
    
    // STUDENT PROGRESS subcollection
    match /users/{studentId}/lessonProgress/{lessonId} {
        // A student can write to their own progress subcollection.
        // A director or the linked teacher can read it.
        allow write: if request.auth.uid == studentId;
        allow read: if request.auth.uid == studentId || isDirector() || isLinked(studentId);
    }
    
    // SUPERVISOR NOTES
    match /supervisor_notes/{noteId} {
        // Supervisor for the subject can create notes.
        // Director, the supervisor who wrote it, or the teacher of the lesson can read them.
        function isSupervisorForSubjectInRequest() {
            let supervisor = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
            let lesson = get(/databases/$(database)/documents/lessons/$(request.resource.data.lessonId)).data;
            return supervisor.role == 'supervisor_subject' && supervisor.subjectId == lesson.subjectId;
        }
        allow create: if isSupervisorForSubjectInRequest();

        function canReadNote() {
            let userRole = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
            let lesson = get(/databases/$(database)/documents/lessons/$(resource.data.lessonId)).data;
            return userRole == 'directeur' || // director
                   request.auth.uid == resource.data.authorId || // supervisor who wrote it
                   request.auth.uid == lesson.authorId; // teacher who owns the lesson
        }
        allow read: if canReadNote();
    }
  }
}