rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =================================
    //  HELPER FUNCTIONS
    // =================================
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isUserAuthenticated() && request.auth.uid == userId;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isDirector() {
      let userData = getUserData(request.auth.uid);
      return isUserAuthenticated() && userData.role == 'directeur';
    }

    function isGeneralSupervisor() {
      let userData = getUserData(request.auth.uid);
      return isUserAuthenticated() && userData.role == 'supervisor_general';
    }

    function isSubjectSupervisor() {
      let userData = getUserData(request.auth.uid);
      return isUserAuthenticated() && userData.role == 'supervisor_subject';
    }
    
    function isTeacher() {
      let userData = getUserData(request.auth.uid);
      return isUserAuthenticated() && userData.role == 'teacher';
    }
    
    function isStudent() {
      let userData = getUserData(request.auth.uid);
      return isUserAuthenticated() && userData.role == 'student';
    }


    // =================================
    //  RULES
    // =================================

    // Public collections can be read by anyone.
    match /stages/{stageId} {
      allow read: if true;
      allow write: if isDirector();
    }
    match /levels/{levelId} {
      allow read: if true;
      allow write: if isDirector();
    }
    match /subjects/{subjectId} {
      allow read: if true;
      allow write: if isDirector();
    }
    match /settings/{settingId} {
      allow read: if true;
      allow write: if isDirector();
    }

    // Users Collection
    match /users/{userId} {
      // 1. Users can read/write their own data.
      // 2. Directors can read/write any user data.
      // 3. General supervisors can read any user data (for lists).
      // 4. Subject supervisors can read data of users in their stage.
      // 5. Students can read data of their linked teachers.
      allow get: if isOwner(userId) 
                  || isDirector() 
                  || isGeneralSupervisor()
                  || (isSubjectSupervisor() && getUserData(request.auth.uid).stageId == resource.data.stageId)
                  || (isStudent() && userId in getUserData(request.auth.uid).linkedTeachers.values());
                  
      allow list: if isDirector() || isGeneralSupervisor();

      allow write: if isOwner(userId) || isDirector();
      
      match /lessonProgress/{progressId} {
        allow read, write: if isOwner(userId) || isDirector() || isTeacher(); // Teachers can write progress
      }
    }

    // Lessons Collection
    match /lessons/{lessonId} {
      // Any authenticated user can read a lesson (student access is controlled by isLocked in UI)
      allow read: if isUserAuthenticated();

      // Only the author or a director can write to a lesson.
      allow write: if isDirector() || (isUserAuthenticated() && request.resource.data.authorId == request.auth.uid);
      
      // Exercises subcollection follows lesson permissions.
       match /exercises/{exerciseId} {
        allow read, write: if true; // Simple rule for now
      }
    }

    // Messages Collection
    match /messages/{messageId} {
        // Any user can send a message
        allow create: if true; 
        // Only director and general supervisor can read/update messages
        allow read, update: if isDirector() || isGeneralSupervisor();
    }

    // Supervisor Notes Collection
    match /supervisor_notes/{noteId} {
        // Any authenticated user can create/read notes (access controlled by UI)
        allow read, create: if isUserAuthenticated();
    }
  }
}
